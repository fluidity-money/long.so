package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/fluidity-money/long.so/cmd/graphql.ethereum/graph/model"
	"github.com/fluidity-money/long.so/cmd/graphql.ethereum/lib/erc20"
	"github.com/fluidity-money/long.so/lib/types"
	"github.com/fluidity-money/long.so/lib/types/seawater"
)

// SetVolumeYieldPriceAndTVLForLastHour is the resolver for the setVolumeYieldPriceAndTVLForLastHour field.
func (r *mutationResolver) SetVolumeYieldPriceAndTVLForLastHour(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: SetVolumeYieldPriceAndTVLForLastHour - setVolumeYieldPriceAndTVLForLastHour"))
}

// SeawaterPools is the resolver for the seawaterPools field.
func (r *queryResolver) SeawaterPools(ctx context.Context) (pools []seawater.Pool, err error) {
	err = r.DB.Table("seawater_active_positions_1").Scan(pools).Error
	return pools, err
}

// GetPool is the resolver for the getPool field.
func (r *queryResolver) GetPool(ctx context.Context, address string) (pool *seawater.Pool, err error) {
	err = r.DB.Table("events_seawater_newpool").Where("token = ?", address).Scan(pool).Error
	return
}

// GetPoolPositions is the resolver for the getPoolPositions field.
func (r *queryResolver) GetPoolPositions(ctx context.Context, address string) (positions []seawater.Position, err error) {
	err = r.DB.Table("seawater_active_positions_1").Where("pool = ?", address).Scan(positions).Error
	return
}

// GetPosition is the resolver for the getPosition field.
func (r *queryResolver) GetPosition(ctx context.Context, id string) (position *seawater.Position, err error) {
	i, err := types.NumberFromString(id)
	if err != nil {
		return nil, fmt.Errorf("bad id: %v", err)
	}
	err = r.DB.Table("seawater_positions_1").Where("pos_id = ?", i).Scan(position).Error
	return
}

// GetWallet is the resolver for the getWallet field.
func (r *queryResolver) GetWallet(ctx context.Context, address string) (*model.Wallet, error) {
	return nil, nil // TODO
}

// ID is the resolver for the id field.
func (r *seawaterPoolResolver) ID(ctx context.Context, obj *seawater.Pool) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("no pool obj")
	}
	return obj.Id.String(), nil
}

// Address is the resolver for the address field.
func (r *seawaterPoolResolver) Address(ctx context.Context, obj *seawater.Pool) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("no pool obj")
	}
	return obj.Token.String(), nil
}

// Token is the resolver for the token field.
func (r *seawaterPoolResolver) Token(ctx context.Context, obj *seawater.Pool) (t model.Token, err error) {
	if obj == nil {
		return t, fmt.Errorf("no pool obj")
	}
	name, symbol, totalSupply, decimals, err := erc20.GetErc20Details(
		ctx,
		r.Geth,
		obj.Token,
	)
	if err != nil {
		return t, fmt.Errorf("erc20: %v", err)
	}
	return model.Token{
		Name:        name,
		Symbol:      symbol,
		TotalSupply: totalSupply.String(),
		Decimals:    int(decimals),
	}, nil
}

// VolumeOverTimeDaily is the resolver for the volumeOverTimeDaily field.
func (r *seawaterPoolResolver) VolumeOverTimeDaily(ctx context.Context, obj *seawater.Pool) ([]model.PairAmount, error) {
	return nil, nil // TODO
}

// VolumeOverTimeMonthly is the resolver for the volumeOverTimeMonthly field.
func (r *seawaterPoolResolver) VolumeOverTimeMonthly(ctx context.Context, obj *seawater.Pool) ([]model.PairAmount, error) {
	return nil, nil // TODO
}

// VolumeOverTimeYearly is the resolver for the volumeOverTimeYearly field.
func (r *seawaterPoolResolver) VolumeOverTimeYearly(ctx context.Context, obj *seawater.Pool) ([]model.PairAmount, error) {
	return nil, nil // TODO
}

// YieldOverTimeDaily is the resolver for the yieldOverTimeDaily field.
func (r *seawaterPoolResolver) YieldOverTimeDaily(ctx context.Context, obj *seawater.Pool) ([]model.PairAmount, error) {
	return nil, nil // TODO
}

// YieldOverTimeMonthly is the resolver for the yieldOverTimeMonthly field.
func (r *seawaterPoolResolver) YieldOverTimeMonthly(ctx context.Context, obj *seawater.Pool) ([]model.PairAmount, error) {
	return nil, nil // TODO
}

// YieldOverTimeYearly is the resolver for the yieldOverTimeYearly field.
func (r *seawaterPoolResolver) YieldOverTimeYearly(ctx context.Context, obj *seawater.Pool) ([]model.PairAmount, error) {
	return nil, nil // TODO
}

// PriceOverTimeDaily is the resolver for the priceOverTimeDaily field.
func (r *seawaterPoolResolver) PriceOverTimeDaily(ctx context.Context, obj *seawater.Pool) ([]string, error) {
	return nil, nil // TODO
}

// PriceOverTimeMonthly is the resolver for the priceOverTimeMonthly field.
func (r *seawaterPoolResolver) PriceOverTimeMonthly(ctx context.Context, obj *seawater.Pool) ([]string, error) {
	return nil, nil // TODO
}

// PriceOverTimeYearly is the resolver for the priceOverTimeYearly field.
func (r *seawaterPoolResolver) PriceOverTimeYearly(ctx context.Context, obj *seawater.Pool) ([]string, error) {
	return nil, nil // TODO
}

// TvlOverTimeDaily is the resolver for the tvlOverTimeDaily field.
func (r *seawaterPoolResolver) TvlOverTimeDaily(ctx context.Context, obj *seawater.Pool) ([]string, error) {
	return nil, nil // TODO
}

// TvlOverTimeMonthly is the resolver for the tvlOverTimeMonthly field.
func (r *seawaterPoolResolver) TvlOverTimeMonthly(ctx context.Context, obj *seawater.Pool) ([]string, error) {
	return nil, nil // TODO
}

// TvlOverTimeYearly is the resolver for the tvlOverTimeYearly field.
func (r *seawaterPoolResolver) TvlOverTimeYearly(ctx context.Context, obj *seawater.Pool) ([]string, error) {
	return nil, nil // TODO
}

// EarnedFeesAprfusdc is the resolver for the earnedFeesAPRFUSDC field.
func (r *seawaterPoolResolver) EarnedFeesAprfusdc(ctx context.Context, obj *seawater.Pool) (string, error) {
	return "", nil // TODO
}

// EarnedFeesAPRToken1 is the resolver for the earnedFeesAPRToken1 field.
func (r *seawaterPoolResolver) EarnedFeesAPRToken1(ctx context.Context, obj *seawater.Pool) (string, error) {
	return "", nil // TODO
}

// LiquidityIncentives is the resolver for the liquidityIncentives field.
func (r *seawaterPoolResolver) LiquidityIncentives(ctx context.Context, obj *seawater.Pool) (model.Amount, error) {
	return model.Amount{}, nil // TODO
}

// SuperIncentives is the resolver for the superIncentives field.
func (r *seawaterPoolResolver) SuperIncentives(ctx context.Context, obj *seawater.Pool) (model.Amount, error) {
	return model.Amount{}, nil // TODO
}

// UtilityIncentives is the resolver for the utilityIncentives field.
func (r *seawaterPoolResolver) UtilityIncentives(ctx context.Context, obj *seawater.Pool) ([]model.UtilityIncentive, error) {
	return nil, nil // TODO
}

// Positions is the resolver for the positions field.
func (r *seawaterPoolResolver) Positions(ctx context.Context, obj *seawater.Pool) (positions []seawater.Position, err error) {
	if obj == nil {
		return nil, fmt.Errorf("no pool obj")
	}
	err = r.DB.Table("seawater_positions_1").Where("pool = ?", obj.Token).Scan(positions).Error
	return
}

// Liquidity is the resolver for the liquidity field.
func (r *seawaterPoolResolver) Liquidity(ctx context.Context, obj *seawater.Pool) ([]model.SeawaterLiquidity, error) {
	return nil, nil // TODO
}

// ID is the resolver for the id field.
func (r *seawaterPositionResolver) ID(ctx context.Context, obj *seawater.Position) (string, error) {
	s, err := r.PositionID(ctx, obj)
	if err != nil {
		return "", err
	}
	return "pos:" + s, nil
}

// PositionID is the resolver for the positionId field.
func (r *seawaterPositionResolver) PositionID(ctx context.Context, obj *seawater.Position) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("no position obj")
	}
	return obj.Id.String(), nil
}

// Owner is the resolver for the owner field.
func (r *seawaterPositionResolver) Owner(ctx context.Context, obj *seawater.Position) (model.Wallet, error) {
	if obj == nil {
		return model.Wallet{}, fmt.Errorf("no position obj")
	}
	return model.Wallet{obj.Owner}, nil
}

// Pool is the resolver for the pool field.
func (r *seawaterPositionResolver) Pool(ctx context.Context, obj *seawater.Position) (pool seawater.Pool, err error) {
	if obj == nil {
		return seawater.Pool{}, fmt.Errorf("no position obj")
	}
	err = r.DB.Table("events_seawater_newpool").Where("token = ?", obj.Pool).Scan(&pool).Error
	return
}

// Lower is the resolver for the lower field.
func (r *seawaterPositionResolver) Lower(ctx context.Context, obj *seawater.Position) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("no position obj")
	}
	return obj.Lower.String(), nil
}

// Upper is the resolver for the upper field.
func (r *seawaterPositionResolver) Upper(ctx context.Context, obj *seawater.Position) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("no position obj")
	}
	return obj.Upper.String(), nil
}

// Liquidity is the resolver for the liquidity field.
func (r *seawaterPositionResolver) Liquidity(ctx context.Context, obj *seawater.Position) (model.PairAmount, error) {
	return model.PairAmount{}, nil // TODO
}

// ID is the resolver for the id field.
func (r *walletResolver) ID(ctx context.Context, obj *model.Wallet) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("no wallet obj")
	}
	return "wallet" + obj.Address.String(), nil
}

// Address is the resolver for the address field.
func (r *walletResolver) Address(ctx context.Context, obj *model.Wallet) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("no token")
	}
	return obj.Address.String(), nil
}

// Balances is the resolver for the balances field.
func (r *walletResolver) Balances(ctx context.Context, obj *model.Wallet) ([]model.TokenBalance, error) {
	return nil, nil // TODO
}

// Positions is the resolver for the positions field.
func (r *walletResolver) Positions(ctx context.Context, obj *model.Wallet) ([]seawater.Position, error) {
	return nil, nil // TODO
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// SeawaterPool returns SeawaterPoolResolver implementation.
func (r *Resolver) SeawaterPool() SeawaterPoolResolver { return &seawaterPoolResolver{r} }

// SeawaterPosition returns SeawaterPositionResolver implementation.
func (r *Resolver) SeawaterPosition() SeawaterPositionResolver { return &seawaterPositionResolver{r} }

// Wallet returns WalletResolver implementation.
func (r *Resolver) Wallet() WalletResolver { return &walletResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type seawaterPoolResolver struct{ *Resolver }
type seawaterPositionResolver struct{ *Resolver }
type walletResolver struct{ *Resolver }
