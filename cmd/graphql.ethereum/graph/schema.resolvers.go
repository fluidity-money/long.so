package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/fluidity-money/amm.superposition.so/cmd/graphql.ethereum/graph/model"
)

// SeawaterPools is the resolver for the seawaterPools field.
func (r *queryResolver) SeawaterPools(ctx context.Context) (pools []model.SeawaterPool, err error) {
	err = r.DB.Table("seawater_active_positions_1").Scan(pools).Error
	return pools, err
}

// GetPool is the resolver for the getPool field.
func (r *queryResolver) GetPool(ctx context.Context, address string) (*model.SeawaterPool, error) {
	panic(fmt.Errorf("not implemented: GetPool - getPool"))
}

// GetPoolPositions is the resolver for the getPoolPositions field.
func (r *queryResolver) GetPoolPositions(ctx context.Context, address string) ([]model.SeawaterPosition, error) {
	panic(fmt.Errorf("not implemented: GetPoolPositions - getPoolPositions"))
}

// GetPosition is the resolver for the getPosition field.
func (r *queryResolver) GetPosition(ctx context.Context, id string) (*model.SeawaterPosition, error) {
	panic(fmt.Errorf("not implemented: GetPosition - getPosition"))
}

// GetWallet is the resolver for the getWallet field.
func (r *queryResolver) GetWallet(ctx context.Context, address string) (*model.Wallet, error) {
	panic(fmt.Errorf("not implemented: GetWallet - getWallet"))
}

// ID is the resolver for the id field.
func (r *seawaterPoolResolver) ID(ctx context.Context, obj *model.SeawaterPool) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Address is the resolver for the address field.
func (r *seawaterPoolResolver) Address(ctx context.Context, obj *model.SeawaterPool) (string, error) {
	panic(fmt.Errorf("not implemented: Address - address"))
}

// VolumeOverTimeDaily is the resolver for the volumeOverTimeDaily field.
func (r *seawaterPoolResolver) VolumeOverTimeDaily(ctx context.Context, obj *model.SeawaterPool) ([]model.PairAmount, error) {
	panic(fmt.Errorf("not implemented: VolumeOverTimeDaily - volumeOverTimeDaily"))
}

// VolumeOverTimeMonthly is the resolver for the volumeOverTimeMonthly field.
func (r *seawaterPoolResolver) VolumeOverTimeMonthly(ctx context.Context, obj *model.SeawaterPool) ([]model.PairAmount, error) {
	panic(fmt.Errorf("not implemented: VolumeOverTimeMonthly - volumeOverTimeMonthly"))
}

// VolumeOverTimeYearly is the resolver for the volumeOverTimeYearly field.
func (r *seawaterPoolResolver) VolumeOverTimeYearly(ctx context.Context, obj *model.SeawaterPool) ([]model.PairAmount, error) {
	panic(fmt.Errorf("not implemented: VolumeOverTimeYearly - volumeOverTimeYearly"))
}

// YieldOverTimeDaily is the resolver for the yieldOverTimeDaily field.
func (r *seawaterPoolResolver) YieldOverTimeDaily(ctx context.Context, obj *model.SeawaterPool) ([]model.PairAmount, error) {
	panic(fmt.Errorf("not implemented: YieldOverTimeDaily - yieldOverTimeDaily"))
}

// YieldOverTimeMonthly is the resolver for the yieldOverTimeMonthly field.
func (r *seawaterPoolResolver) YieldOverTimeMonthly(ctx context.Context, obj *model.SeawaterPool) ([]model.PairAmount, error) {
	panic(fmt.Errorf("not implemented: YieldOverTimeMonthly - yieldOverTimeMonthly"))
}

// YieldOverTimeYearly is the resolver for the yieldOverTimeYearly field.
func (r *seawaterPoolResolver) YieldOverTimeYearly(ctx context.Context, obj *model.SeawaterPool) ([]model.PairAmount, error) {
	panic(fmt.Errorf("not implemented: YieldOverTimeYearly - yieldOverTimeYearly"))
}

// PriceOverTimeDaily is the resolver for the priceOverTimeDaily field.
func (r *seawaterPoolResolver) PriceOverTimeDaily(ctx context.Context, obj *model.SeawaterPool) ([]string, error) {
	panic(fmt.Errorf("not implemented: PriceOverTimeDaily - priceOverTimeDaily"))
}

// PriceOverTimeMonthly is the resolver for the priceOverTimeMonthly field.
func (r *seawaterPoolResolver) PriceOverTimeMonthly(ctx context.Context, obj *model.SeawaterPool) ([]string, error) {
	panic(fmt.Errorf("not implemented: PriceOverTimeMonthly - priceOverTimeMonthly"))
}

// PriceOverTimeYearly is the resolver for the priceOverTimeYearly field.
func (r *seawaterPoolResolver) PriceOverTimeYearly(ctx context.Context, obj *model.SeawaterPool) ([]string, error) {
	panic(fmt.Errorf("not implemented: PriceOverTimeYearly - priceOverTimeYearly"))
}

// TvlOverTimeDaily is the resolver for the tvlOverTimeDaily field.
func (r *seawaterPoolResolver) TvlOverTimeDaily(ctx context.Context, obj *model.SeawaterPool) ([]string, error) {
	panic(fmt.Errorf("not implemented: TvlOverTimeDaily - tvlOverTimeDaily"))
}

// TvlOverTimeMonthly is the resolver for the tvlOverTimeMonthly field.
func (r *seawaterPoolResolver) TvlOverTimeMonthly(ctx context.Context, obj *model.SeawaterPool) ([]string, error) {
	panic(fmt.Errorf("not implemented: TvlOverTimeMonthly - tvlOverTimeMonthly"))
}

// TvlOverTimeYearly is the resolver for the tvlOverTimeYearly field.
func (r *seawaterPoolResolver) TvlOverTimeYearly(ctx context.Context, obj *model.SeawaterPool) ([]string, error) {
	panic(fmt.Errorf("not implemented: TvlOverTimeYearly - tvlOverTimeYearly"))
}

// EarnedFeesAprfusdc is the resolver for the earnedFeesAPRFUSDC field.
func (r *seawaterPoolResolver) EarnedFeesAprfusdc(ctx context.Context, obj *model.SeawaterPool) (string, error) {
	panic(fmt.Errorf("not implemented: EarnedFeesAprfusdc - earnedFeesAPRFUSDC"))
}

// EarnedFeesAPRToken1 is the resolver for the earnedFeesAPRToken1 field.
func (r *seawaterPoolResolver) EarnedFeesAPRToken1(ctx context.Context, obj *model.SeawaterPool) (string, error) {
	panic(fmt.Errorf("not implemented: EarnedFeesAPRToken1 - earnedFeesAPRToken1"))
}

// LiquidityIncentives is the resolver for the liquidityIncentives field.
func (r *seawaterPoolResolver) LiquidityIncentives(ctx context.Context, obj *model.SeawaterPool) (model.Amount, error) {
	panic(fmt.Errorf("not implemented: LiquidityIncentives - liquidityIncentives"))
}

// SuperIncentives is the resolver for the superIncentives field.
func (r *seawaterPoolResolver) SuperIncentives(ctx context.Context, obj *model.SeawaterPool) (model.Amount, error) {
	panic(fmt.Errorf("not implemented: SuperIncentives - superIncentives"))
}

// UtilityIncentives is the resolver for the utilityIncentives field.
func (r *seawaterPoolResolver) UtilityIncentives(ctx context.Context, obj *model.SeawaterPool) ([]model.UtilityIncentive, error) {
	panic(fmt.Errorf("not implemented: UtilityIncentives - utilityIncentives"))
}

// Positions is the resolver for the positions field.
func (r *seawaterPoolResolver) Positions(ctx context.Context, obj *model.SeawaterPool) ([]model.SeawaterPosition, error) {
	panic(fmt.Errorf("not implemented: Positions - positions"))
}

// Liquidity is the resolver for the liquidity field.
func (r *seawaterPoolResolver) Liquidity(ctx context.Context, obj *model.SeawaterPool) ([]model.SeawaterLiquidity, error) {
	panic(fmt.Errorf("not implemented: Liquidity - liquidity"))
}

// ID is the resolver for the id field.
func (r *seawaterPositionResolver) ID(ctx context.Context, obj *model.SeawaterPosition) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// PositionID is the resolver for the positionId field.
func (r *seawaterPositionResolver) PositionID(ctx context.Context, obj *model.SeawaterPosition) (string, error) {
	panic(fmt.Errorf("not implemented: PositionID - positionId"))
}

// Lower is the resolver for the lower field.
func (r *seawaterPositionResolver) Lower(ctx context.Context, obj *model.SeawaterPosition) (string, error) {
	panic(fmt.Errorf("not implemented: Lower - lower"))
}

// Upper is the resolver for the upper field.
func (r *seawaterPositionResolver) Upper(ctx context.Context, obj *model.SeawaterPosition) (string, error) {
	panic(fmt.Errorf("not implemented: Upper - upper"))
}

// Liquidity is the resolver for the liquidity field.
func (r *seawaterPositionResolver) Liquidity(ctx context.Context, obj *model.SeawaterPosition) (model.PairAmount, error) {
	panic(fmt.Errorf("not implemented: Liquidity - liquidity"))
}

// Name is the resolver for the name field.
func (r *tokenResolver) Name(ctx context.Context, obj *model.Token) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// TotalSupply is the resolver for the totalSupply field.
func (r *tokenResolver) TotalSupply(ctx context.Context, obj *model.Token) (string, error) {
	panic(fmt.Errorf("not implemented: TotalSupply - totalSupply"))
}

// Decimals is the resolver for the decimals field.
func (r *tokenResolver) Decimals(ctx context.Context, obj *model.Token) (string, error) {
	panic(fmt.Errorf("not implemented: Decimals - decimals"))
}

// ID is the resolver for the id field.
func (r *walletResolver) ID(ctx context.Context, obj *model.Wallet) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Address is the resolver for the address field.
func (r *walletResolver) Address(ctx context.Context, obj *model.Wallet) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("no token")
	}
	return obj.Address.String(), nil
}

// Balances is the resolver for the balances field.
func (r *walletResolver) Balances(ctx context.Context, obj *model.Wallet) ([]model.TokenBalance, error) {
	panic(fmt.Errorf("not implemented: Balances - balances"))
}

// Positions is the resolver for the positions field.
func (r *walletResolver) Positions(ctx context.Context, obj *model.Wallet) ([]model.SeawaterPosition, error) {
	panic(fmt.Errorf("not implemented: Positions - positions"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// SeawaterPool returns SeawaterPoolResolver implementation.
func (r *Resolver) SeawaterPool() SeawaterPoolResolver { return &seawaterPoolResolver{r} }

// SeawaterPosition returns SeawaterPositionResolver implementation.
func (r *Resolver) SeawaterPosition() SeawaterPositionResolver { return &seawaterPositionResolver{r} }

// Token returns TokenResolver implementation.
func (r *Resolver) Token() TokenResolver { return &tokenResolver{r} }

// Wallet returns WalletResolver implementation.
func (r *Resolver) Wallet() WalletResolver { return &walletResolver{r} }

type queryResolver struct{ *Resolver }
type seawaterPoolResolver struct{ *Resolver }
type seawaterPositionResolver struct{ *Resolver }
type tokenResolver struct{ *Resolver }
type walletResolver struct{ *Resolver }
