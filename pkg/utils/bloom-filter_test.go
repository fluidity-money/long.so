package main

import (
	"math/big"
	"math/rand"
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/assert"

	ethCommon "github.com/ethereum/go-ethereum/common"
)

// TestAddToBloom by testing if we're below the error rate that makes
// sense in the product context (5%.)
func TestAddToBloom(t *testing.T) {
	elems := 875
	addresses := make([]ethCommon.Address, elems)
	bloom := new(big.Int)
	for i := 0; i < len(addresses); i++ {
		a := newAddr()
		addresses[i] = a
		addToBloom(bloom, a)
	}
	// Test that we can validate all the addresses.
	for _, a := range addresses {
		assert.True(t, bloomContains(bloom, a))
	}
	// Test that the amount of probabilities is in line.
	attempts := 1_000_000
	hits := 0
	for i := 0; i < attempts; i++ {
		if bloomContains(bloom, newAddr()) {
			hits++
		}
	}
	// Check!
	occurances := new(big.Rat).SetInt64(int64(hits))
	occurances.Quo(occurances, new(big.Rat).SetInt64(int64(attempts)))
	prob, _ := new(big.Rat).SetString("0.05")
	assert.Falsef(t,
		//occurances > prob
		occurances.Cmp(prob) > 0,
		"bloom filter not correct! hits %v, attempts %v, occurances %v, prob %v",
		hits,
		attempts,
		occurances.FloatString(16),
		prob.FloatString(16),
	)
}

func TestCreateContract(t *testing.T) {
	b := new(big.Int)
	stakers := []string{
		"0x48d2b2167cf226a965945162162a15cffc94c5dc",
		"0xbda286835101a2dc37f95c4baa8f0b96fdfbe7a4",
		"0x59f423153e5f1553d0712854ac082c3e37527b45",
		"0x7e00d48be78fb458fd4aa4df6d2182b31a055ce1",
		"0x4433d7c2b98b7478faac7ef96977539d8fed8327",
		"0xd6e41a2fc219ee8929f6b3ba779f9d745d6257b2",
		"0x09fe56d0f725dbce9c53eaf0d3c37e554806d532",
		"0xbe3c4af0ca362a805a22244cb5ca61da48c19a41",
		"0xe0b35c1e847749be1a6aef47570aef3f6d2c8c38",
		"0xbf8047bd6fc06d5b84f7fc4605a48234529fd417",
	}
	for _, a := range stakers {
		addToBloom(b, ethCommon.HexToAddress(a))
	}
	c := createContract(b)
	x,err := hex.DecodeString("610b923d81600a3d39f
	if err != nil {
		t.Fatalf("failed to decode: %v", err)
	}
	assert.Equal(t, x ,c)
}

func newAddr() ethCommon.Address {
	b := make([]byte, 32)
	_, err := rand.Read(b)
	if err != nil {
		panic(err)
	}
	return ethCommon.BytesToAddress(b)
}
